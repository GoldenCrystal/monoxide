2011-10-09  Fabien  <goldencrystal@gmail.com>

	* Foundation:
	* View.cs:
	* Data.cs:
	* System.MacOS.csproj:
	* Thickness.cs:
	* ViewStyle.cs:
	* SafeNativeMethods.cs:
	* URLProtocol.cs:
	* URLProtocolClient.cs: 

2010-11-29  Fabien  <goldencrystal@gmail.com>

	* System.MacOS.csproj: 

	* SafeNativeMethods.CoreGraphics.cs: New native methods +
	little code reorganization

	* Segment.cs:
	* SegmentedCell.cs: Updated the ownership code to the same
	pattern as in other classes.

	* TableViewBase.cs: Better column collection, but still not
	fully functional.

	* TableColumn.cs: Starting a really useful implementation.
	Added most members (width & co still missing)

	* ColumnSizingOptions.cs: Enum for column sizing in
	TableViews. Not used yet.

	* View.cs: Added localized exception text

	* Cell.cs: Made the cell value working and much more useful !
	:)

	* GraphicsContext.cs: Bugfix + Lot of path goodness

	* CommonSelectors.cs: New selectors added.

	* PropertyGrid.cs: Making it a good test case for OutlineView.
	Now correctly embeds the view in a ScrollView.
	Shows basic object properties.

	* OutlineViewBase.cs: Migrated to the new automatic bridging
	feature
	Added support for multiple columns
	Began migrating things to TableView when they should be there

	* DelayCreatedNativeObject.cs: !!! This is a template file !!!

	* ObjectiveC.Bridging.cs: [Semi-Useless] Can now generate cool
	names for nested classes: I think CLROutlineViewDelegate will
	look better than CLRDelegate450 ;)
	Added *the* line and a reminder to do some work on the
	bridging engine.
	This (commented) line is for storing managed objects as
	GCHandle(s) inside native objects. This should bring better
	native interop once implemented.

	* SafeNativeMethods.cs: New native methods for objective-C
	runtime interop.
	I don't know how I missed the ivar_GetOffset the first time I
	looked into these… T_T
	Now most of the things needed for a better bridge engine are
	here…

	* NativeObject.cs: !!! Template file !!!

	* ErrorMessages.resx:
	* ErrorMessages.fr.resx: Added two new error messages

	* LineCap.cs:
	* LineJoin.cs:
	* TextDrawingMode.cs: One of the enums for CGContext graphic
	state

	* PathDrawingMode.cs: Enum used for DrawPath method of
	GraphicsContext

	* Color.cs: The "var" keyword is better ! ;)
	(Just trying to use the same style across all files)

	* PathData.cs: Now really useful for drawing:
	Can create a CGMutablePathRef or CGPathRef from data.
	Can add itself directly onto a graphics context.
	Can initialize from native CG[Mutable]Path data.

	* TextEncoding.cs: Enum for text drawing. Not used yet… Maybe
	never ? (All CGContext enums are now present)

	* Path.cs: Real native interop, not really used yet.
	Can create a managed object from a native CGPathRef, but
	everything is still done by PathData.

	* InterpolationQuality.cs: One of the enums for CGContext
	graphic state.

2010-11-26  Fabien  <goldencrystal@gmail.com>

	* ObjectiveC.cs: Added and disabled a tweak for process and
	bundle path. It don't seem to work.
	MutableCopy !

	* System.MacOS.csproj:
	* ControlSize.cs:
	* VerticalAlignment.cs:
	* HorizontalAlignment.cs: 

	* WebView.cs: Small change in the internal native
	initialization procedure.

	* ViewToolbarItem.cs: Rudimentary fix for the new layout
	model. It works for now.

	* Thickness.cs: Lot of operator overloading… Maybe too much ?

	* View.cs: Code cleaned and new layout model. (Still need some
	tweaks, especially for toolbar items, content views, and
	splitviews)
	SplitViews are still broken.
	ScrollViews seem to work somehow. (But they need some work
	nonetheless)

	* Cell.cs: Added the ControlSize property as well as a new
	(and unused yet) measure method.

	* Application.cs: Added Tweaks for the process and bundle… But
	they crash the application when launched as a bundle, so they
	are disabled.
	Removed the setAppleMenu: call for Snow Leopard as it finally
	seems to be unecessary.
	The Application class now provides Mac OSX OSVersion.

	* Window.cs: ContentView is now autosized, yeah !
	The native pointer is registered much earlier, in order to
	prevent possible bugs.

	* AttributedString.cs: To implement.

	* Bundle.cs: Added an AssemblyBundle property
	Can find bundles based on assembly

	* SafeNativeMethods.CoreFoundation.cs: Private methods used
	for tweaks. Disabled by default.

	* CloneFactory.cs: This will be used for reworking a bit the
	current bridging strategy.

	* ObjectiveC.Bridging.cs: Fix for native object copying.

	* SafeNativeMethods.cs: Added methods for NSDictionary.

	* SafeNativeMethods.ApplicationServices.cs: Moved from AppKit

	* ObjectiveC.String.cs: Implementation of a wrapper for CLR
	strings… Not used yet.

	* ObjectiveC.Object.cs: Future implementations for CLRObject
	and futre base implementation for CLR* Objective-C types

	* OSVersion.cs: Use Gestalt to get OSX version info and build
	an OperatingSystem out of it.

	* NativeClassAttribute.cs: Allow the attribute to be used on
	structs.

	* SafeNativeMethods.AppKit.cs: NSRange and NSNotFound added.
	Moved some methods to a new file.

	* SafeNativeMethods.CoreServices.cs: Gestalt Manager ->
	Gestalt API

	* Rectangle.cs: Let the properties be modifiable

	* Size.cs: Some operator goodness, and infinite size.

	* NSDictionary.cs: Helper methods for the native type
	NSDictionary.

	* Memory.cs: Generic memory manipulation wrappers using cpblk
	and initblk.

2010-11-10  Fabien  <goldencrystal@gmail.com>

	* CoreText:
	* CoreImage:
	* CoreGraphics:
	* Cell.cs:
	* View.cs:
	* Image.cs:
	* Window.cs:
	* WebView.cs:
	* WebFrame.cs:
	* System.MacOS.csproj:
	* Path.cs:
	* Size.cs:
	* Point.cs:
	* SearchField.cs:
	* Color.cs:
	* Matrix.cs:
	* ObjectiveC.Bridging.cs:
	* CommonClasses.cs:
	* DrawEventArgs.cs:
	* RGBColor.cs:
	* PathData.cs:
	* TableHeaderCell.cs:
	* BlendMode.cs:
	* Rectangle.cs:
	* GraphicsContext.cs:
	* ColorSpace.cs:
	* SafeNativeMethods.AppKit.cs:
	* PathCommand.cs:
	* ImageRepresentation.cs:
	* SafeNativeMethods.CoreGraphics.cs:
	* BitmapImageRepresentation.cs:
	* SafeNativeMethods.CoreFoundation.cs:
	* ColorRenderingIntent.cs:
	* SupportedFileTypeAttribute.cs: 

	* DrawableView.cs: Exposes the draw event

	* Size.cs:
	* Point.cs:
	* Rectangle.cs: Moved

	* SafeNativeMethods.cs: Split into multiple files

